#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# OpenstacK monitoring script for Nagios
# This script checks if any neutron agents are down in the cloud
#
# Author: Akshay Bhandari
#
# Requirments: python, python-argparse, python-requests(>= 0.8.8)

import sys
import argparse
import requests

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

# Parsing the aruments
parser = argparse.ArgumentParser(description=('Check if any neutron agents'
                                              ' are down in the cloud.'))
parser.add_argument('--auth_url', metavar='URL', type=str,
                    required=True,
                    help='Keystone URL')
parser.add_argument('--username', metavar='username', type=str,
                    required=True,
                    help='username to use for authentication')
parser.add_argument('--password', metavar='password', type=str,
                    required=True,
                    help='password to use for authentication')
parser.add_argument('--tenant', metavar='tenant', type=str,
                    required=True,
                    help='tenant name to use for authentication')
parser.add_argument('--region', metavar='region', type=str,
                    required=False,
                    help=('Name of the region as specified in the service '
                          'catalog that this check needs to be run on.'))
parser.add_argument('--neutron_url', metavar='http://controller:9696/v2.0', 
                    type=str, required=False,
                    help=('neutron endpoint to use, in stead '
                          'of the one returned by Keystone.'))
parser.add_argument('--insecure', action='store_false', dest='verify',
                    required=False,
                    help='Disable SSL verification.')

args = parser.parse_args()

headers = {'content-type': 'application/json'}

auth_token = None

neutron_url = None

# code for getting auth token and neutron url for specified tenant.
try:

    auth_request = ('{"auth":{"tenantName": "' + args.tenant + 
                    '", "passwordCredentials": {"username": "' + args.username + 
                    '", "password": "' + args.password + '"}}}')

    auth_response = requests.post(args.auth_url + '/tokens', data=auth_request,
                                  headers=headers, verify=args.verify).json();

    if not auth_response['access']['token']['id']:
        raise Exception("Authentication failed. Failed to get an auth token.")

    auth_token = auth_response['access']['token']['id']

    services = auth_response['access']['serviceCatalog']

    if args.neutron_url is None:
        for service in services:
            if service['type'] == 'network':
                if args.region:
                    for region_urls in service['endpoints']:
                        if region_urls['region'] == args.region:
                            neutron_url = region_urls['publicURL']
                else:
                    neutron_url = service['endpoints'][0]['publicURL']
    else:
        neutron_url = args.neutron_url
    if neutron_url is None:
        raise Exception(("Authentication succeeded but "
                         "unable to find compute service"))

except Exception as e:
    print ('WARNING: Athentication failed for tenant %s and user %s' 
           % (args.tenant, args.username) + '\nInfo: ' + str(e))
    sys.exit(STATE_WARNING)

# Code for checking if all agents are alive
headers['X-Auth-Token'] = auth_token

try:
    crashed_agent_count = 0
    crashed_agent_host_list = []
    show_agents_response = requests.get(neutron_url + 
                                         '/agents.json', 
                                         headers=headers, 
                                         verify=args.verify).json()
    if 'agents' in show_agents_response:
        for agent_count in range(len(show_agents_response['agents'])):
            if show_agents_response['agents'][agent_count]['alive'] == False:
                crashed_agent_count += 1
                crashed_agent_host_list.append(str(show_agents_response['agents'][agent_count]['host']))
                crashed_agent_host_list = list(set(crashed_agent_host_list))
        if crashed_agent_count == 0:
            print ('OK: Checked ' + str(len(show_agents_response['agents'])) 
                   + ' agents. All are alive.')
        else:
            print('CRITICAL: ' + str(crashed_agent_count) + ' agents are down.'
                  + ' Affected nodes are: ' + str(crashed_agent_host_list))
            sys.exit(STATE_CRITICAL)
    else:
	raise Exception('Please check the specified "neutron_url"')
        
except Exception as e:
    print ('CRITICAL: ' + str(e))
    sys.exit(STATE_CRITICAL)

sys.exit(STATE_OK)

