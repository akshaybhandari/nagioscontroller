#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# OpenstacK monitoring script for Nagios
# This script checks if the specified router is present or not
#
# Author: Akshay Bhandari
#
# Requirments: python, python-argparse, python-requests(>= 0.8.8)

import sys
import argparse
import requests

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

# Parsing the aruments
parser = argparse.ArgumentParser(description=('Check if a router is'
                                              ' present in the cloud.'))
parser.add_argument('--auth_url', metavar='URL', type=str,
                    required=True,
                    help='Keystone URL')
parser.add_argument('--username', metavar='username', type=str,
                    required=True,
                    help='username to use for authentication')
parser.add_argument('--password', metavar='password', type=str,
                    required=True,
                    help='password to use for authentication')
parser.add_argument('--tenant', metavar='tenant', type=str,
                    required=True,
                    help='tenant name to use for authentication')
parser.add_argument('--router_id', metavar='ID of a network', type=str, 
                    required=True,
                    help='ID for the router you want to check')
parser.add_argument('--region', metavar='region', type=str,
                    required=False,
                    help=('Name of the region as specified in the service '
                          'catalog that this check needs to be run on.'))
parser.add_argument('--neutron_url', metavar='http://controller:9696/v2.0', type=str,
                    required=False,
                    help=('neutron endpoint to use, in stead '
                          'of the one returned by Keystone.'))
parser.add_argument('--insecure', action='store_false', dest='verify',
                    required=False,
                    help='Disable SSL verification.')

args = parser.parse_args()

headers = {'content-type': 'application/json'}

auth_token = None

neutron_url = None

router_id = args.router_id

# code for getting auth token and neutron url for specified tenant.
try:

    auth_request = ('{"auth":{"tenantName": "' + args.tenant + 
                    '", "passwordCredentials": {"username": "' + args.username + 
                    '", "password": "' + args.password + '"}}}')

    auth_response = requests.post(args.auth_url + '/tokens', data=auth_request,
                                  headers=headers, verify=args.verify).json();

    if not auth_response['access']['token']['id']:
        raise Exception("Authentication failed. Failed to get an auth token.")

    auth_token = auth_response['access']['token']['id']

    services = auth_response['access']['serviceCatalog']

    if args.neutron_url is None:
        for service in services:
            if service['type'] == 'network':
                if args.region:
                    for region_urls in service['endpoints']:
                        if region_urls['region'] == args.region:
                            neutron_url = region_urls['publicURL']
                else:
                    neutron_url = service['endpoints'][0]['publicURL']
    else:
        neutron_url = args.neutron_url
    if neutron_url is None:
        raise Exception(("Authentication succeeded but "
                         "unable to find compute service"))

except Exception as e:
    print ('WARNING: Athentication failed for tenant %s and user %s' 
           % (args.tenant, args.username) + '\nInfo: ' + str(e))
    sys.exit(STATE_WARNING)

# Code for checking if router is present
headers['X-Auth-Token'] = auth_token

try:
    router_found = 0
    show_router_response = requests.get(neutron_url + 
                                         '/routers.json', 
                                         headers=headers, 
                                         verify=args.verify).json()

    if 'routers' in show_router_response:
        for router_count in range(len(show_router_response['routers'])):
            if show_router_response['routers'][router_count]['id'] == router_id:
                print ('OK: Router with name "' 
                       + show_router_response['routers'][router_count]['name']
                       + '" found')
                router_found = 1
                break;
        if router_found == 0:
            raise Exception('No routers found with ID ' + router_id)
                
    else:
	raise Exception('Please check the specified "neutron_url"')
        
except Exception as e:
    print ('CRITICAL: ' + str(e))
    sys.exit(STATE_CRITICAL)

sys.exit(STATE_OK)

